# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache 2.0 License.

import glob
import http
import base64

from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import ec

import infra.e2e_args
import infra.network
import infra.node
import infra.checker
import infra.health_watcher
import requests

import dns
import dns.message
import dns.query
import dns.dnssec
import dns.rrset

rdc = dns.rdataclass
rdt = dns.rdatatype


def add_record(client, origin, name, stype, rdata_obj):
    """Add a DNS record"""

    r = client.post(
        "/app/internal/add",
        {
            "origin": str(origin),
            "record": {
                "name": name,
                "type": int(rdt.from_text(stype)),
                "class_": int(rdc.IN),
                "ttl": 3600,
                "rdata": base64.urlsafe_b64encode(rdata_obj.to_wire()).decode(),
            },
        },
    )
    assert r.status_code == http.HTTPStatus.NO_CONTENT
    return r


def mk_update_policy_proposal(new_policy):
    """Create a policy proposal for updating the registration policy"""
    return {
        "actions": [
            {
                "name": "set_member",
                "args": {"policy": new_policy},
            }
        ]
    }


def set_registration_policy(network, args):
    """Set the registration policy"""
    new_policy = """
    data.claims.sgx_claims.report_body.mr_enclave.length == 32 &&
    JSON.stringify(data.claims.custom_claims.some_name) == JSON.stringify([115, 111, 109, 101, 95, 118, 97, 108, 117, 101, 0]);
    """

    primary, _ = network.find_primary()

    proposal_body, careful_vote = network.consortium.make_proposal(
        "set_registration_policy", new_policy=new_policy
    )

    proposal = network.consortium.get_any_active_member().propose(
        primary, proposal_body
    )

    network.consortium.vote_using_majority(
        primary,
        proposal,
        careful_vote,
    )


def submit_service_registration(
    client, origin, name, address, port, protocol, public_pem
):
    """Submit a service registration request"""

    demo_attestation = """{
        "source": "openenclave",
        "evidence": "AwACAAAAAAAIAA0Ak5pyM/ecTKmUCg2zlX8GByV7poCkzztBEA1BOoP0LTUAAAAAExMCB/+ABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAAAAAAAHAAAAAAAAAL+GiaH9s4KO+lbZ8joVJOwfFkGWioERZbcEz2F49+ALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYAJZJn5IkTD587Qd7hqG0hMYUwp/HikFCd6JbwZEmKwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADrJdgfT2OVVBjgFfTo5mAXKqsKIHwd6dJv2Eh35eavyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARBAAAFwOiY5gHFvAX3ASQ1Nh6SzoZHgNbv/fEXRJLwZxq1K2IJKEC2/8bCfYWQDZSCAe6yynuHkC3AJfB9a82FetQJpBWxRiC4Pxuqak78F0MDYo2IQy0PPTta8rsRgAZV3bfZj+xSqjHCfGZIhcoy7C1WCCXBlyL/EkDPTjDQqfJc4cExMCB/+ABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFQAAAAAAAAAHAAAAAAAAAIzlhoW+NuRhh8Izx+me1v5127M/dWetohewd+zYz4L5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMT1d115ZQPpYTf3fGioKaAFasje1wFAsIGwlEkMV7/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADaeHiXlftEWtCNsuUhLnySVEgAQYfKtaGgDAAVzDMzdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjGzAvqVqMFAZBhm+ZXw077rHYxYB/xb3izTOcK9RdQPoy7LkdysbJaKSZh4wSYpv0Vo68mC0liNyw68kKXvRMiAAAAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8FANwNAAAtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRWpUQ0NCRFNnQXdJQkFnSVZBTDEzdExSZURGVnFSZFc2L2s3ZG1HY0pCSXduTUFvR0NDcUdTTTQ5QkFNQwpNSEV4SXpBaEJnTlZCQU1NR2tsdWRHVnNJRk5IV0NCUVEwc2dVSEp2WTJWemMyOXlJRU5CTVJvd0dBWURWUVFLCkRCRkpiblJsYkNCRGIzSndiM0poZEdsdmJqRVVNQklHQTFVRUJ3d0xVMkZ1ZEdFZ1EyeGhjbUV4Q3pBSkJnTlYKQkFnTUFrTkJNUXN3Q1FZRFZRUUdFd0pWVXpBZUZ3MHlNakEzTVRjd01ETTVNak5hRncweU9UQTNNVGN3TURNNQpNak5hTUhBeElqQWdCZ05WQkFNTUdVbHVkR1ZzSUZOSFdDQlFRMHNnUTJWeWRHbG1hV05oZEdVeEdqQVlCZ05WCkJBb01FVWx1ZEdWc0lFTnZjbkJ2Y21GMGFXOXVNUlF3RWdZRFZRUUhEQXRUWVc1MFlTQkRiR0Z5WVRFTE1Ba0cKQTFVRUNBd0NRMEV4Q3pBSkJnTlZCQVlUQWxWVE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRQoxdGc4aDBhTDRDTW81cTZUV3JNa2IrWi8wWEs2ZU9Nc3NLYTEzbXZwWTZMUUN6ZnFzRDdvTUh5ODlHNVhmK2lrCkxxMW9mdlc4czdhV0RUSithMGExdEtPQ0FxZ3dnZ0trTUI4R0ExVWRJd1FZTUJhQUZORG9xdHAxMS9rdVNSZVkKUEhzVVpkRFY4bGxOTUd3R0ExVWRId1JsTUdNd1lhQmZvRjJHVzJoMGRIQnpPaTh2WVhCcExuUnlkWE4wWldSegpaWEoyYVdObGN5NXBiblJsYkM1amIyMHZjMmQ0TDJObGNuUnBabWxqWVhScGIyNHZkak12Y0dOclkzSnNQMk5oClBYQnliMk5sYzNOdmNpWmxibU52WkdsdVp6MWtaWEl3SFFZRFZSME9CQllFRkI1VmxaTitSaEdUVS9KMUpjeDcKbE5Sc0xpVXRNQTRHQTFVZER3RUIvd1FFQXdJR3dEQU1CZ05WSFJNQkFmOEVBakFBTUlJQjFBWUpLb1pJaHZoTgpBUTBCQklJQnhUQ0NBY0V3SGdZS0tvWklodmhOQVEwQkFRUVE3STA4cS9pZ3laYmh6S3FiblpTSDNqQ0NBV1FHCkNpcUdTSWI0VFFFTkFRSXdnZ0ZVTUJBR0N5cUdTSWI0VFFFTkFRSUJBZ0VSTUJBR0N5cUdTSWI0VFFFTkFRSUMKQWdFUk1CQUdDeXFHU0liNFRRRU5BUUlEQWdFQ01CQUdDeXFHU0liNFRRRU5BUUlFQWdFRU1CQUdDeXFHU0liNApUUUVOQVFJRkFnRUJNQkVHQ3lxR1NJYjRUUUVOQVFJR0FnSUFnREFRQmdzcWhraUcrRTBCRFFFQ0J3SUJCakFRCkJnc3Foa2lHK0UwQkRRRUNDQUlCQURBUUJnc3Foa2lHK0UwQkRRRUNDUUlCQURBUUJnc3Foa2lHK0UwQkRRRUMKQ2dJQkFEQVFCZ3NxaGtpRytFMEJEUUVDQ3dJQkFEQVFCZ3NxaGtpRytFMEJEUUVDREFJQkFEQVFCZ3NxaGtpRworRTBCRFFFQ0RRSUJBREFRQmdzcWhraUcrRTBCRFFFQ0RnSUJBREFRQmdzcWhraUcrRTBCRFFFQ0R3SUJBREFRCkJnc3Foa2lHK0UwQkRRRUNFQUlCQURBUUJnc3Foa2lHK0UwQkRRRUNFUUlCQ3pBZkJnc3Foa2lHK0UwQkRRRUMKRWdRUUVSRUNCQUdBQmdBQUFBQUFBQUFBQURBUUJnb3Foa2lHK0UwQkRRRURCQUlBQURBVUJnb3Foa2lHK0UwQgpEUUVFQkFZQWtHN1ZBQUF3RHdZS0tvWklodmhOQVEwQkJRb0JBREFLQmdncWhrak9QUVFEQWdOSEFEQkVBaUFVCkp5U1A3YkhpZjM2eEhEN2dmTTFHSEFGL1AvMy80azIzQ2k3OFAxTFQwZ0lnY3BqemNwbEJTbjNjSXMwNzNoY0QKREFxZ0U4L3NtdmNIdng5cDJ3TitBOG89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNtRENDQWo2Z0F3SUJBZ0lWQU5Eb3F0cDExL2t1U1JlWVBIc1VaZERWOGxsTk1Bb0dDQ3FHU000OUJBTUMKTUdneEdqQVlCZ05WQkFNTUVVbHVkR1ZzSUZOSFdDQlNiMjkwSUVOQk1Sb3dHQVlEVlFRS0RCRkpiblJsYkNCRApiM0p3YjNKaGRHbHZiakVVTUJJR0ExVUVCd3dMVTJGdWRHRWdRMnhoY21FeEN6QUpCZ05WQkFnTUFrTkJNUXN3CkNRWURWUVFHRXdKVlV6QWVGdzB4T0RBMU1qRXhNRFV3TVRCYUZ3MHpNekExTWpFeE1EVXdNVEJhTUhFeEl6QWgKQmdOVkJBTU1Ha2x1ZEdWc0lGTkhXQ0JRUTBzZ1VISnZZMlZ6YzI5eUlFTkJNUm93R0FZRFZRUUtEQkZKYm5SbApiQ0JEYjNKd2IzSmhkR2x2YmpFVU1CSUdBMVVFQnd3TFUyRnVkR0VnUTJ4aGNtRXhDekFKQmdOVkJBZ01Ba05CCk1Rc3dDUVlEVlFRR0V3SlZVekJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCTDlxK05NcDJJT2cKdGRsMWJrL3VXWjUrVEdRbThhQ2k4ejc4ZnMrZktDUTNkK3VEelhuVlRBVDJaaERDaWZ5SXVKd3ZOM3dOQnA5aQpIQlNTTUpNSnJCT2pnYnN3Z2Jnd0h3WURWUjBqQkJnd0ZvQVVJbVVNMWxxZE5JbnpnN1NWVXI5UUd6a25CcXd3ClVnWURWUjBmQkVzd1NUQkhvRVdnUTRaQmFIUjBjSE02THk5alpYSjBhV1pwWTJGMFpYTXVkSEoxYzNSbFpITmwKY25acFkyVnpMbWx1ZEdWc0xtTnZiUzlKYm5SbGJGTkhXRkp2YjNSRFFTNWtaWEl3SFFZRFZSME9CQllFRk5EbwpxdHAxMS9rdVNSZVlQSHNVWmREVjhsbE5NQTRHQTFVZER3RUIvd1FFQXdJQkJqQVNCZ05WSFJNQkFmOEVDREFHCkFRSC9BZ0VBTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSVFDSmdUYnRWcU95WjFtM2pxaUFYTTZRWWE2cjVzV1MKNHkvRzd5OHVJSkd4ZHdJZ1JxUHZCU0t6elFhZ0JMUXE1czVBNzBwZG9pYVJKOHovMHVEejROZ1Y5MWs9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNqekNDQWpTZ0F3SUJBZ0lVSW1VTTFscWROSW56ZzdTVlVyOVFHemtuQnF3d0NnWUlLb1pJemowRUF3SXcKYURFYU1CZ0dBMVVFQXd3UlNXNTBaV3dnVTBkWUlGSnZiM1FnUTBFeEdqQVlCZ05WQkFvTUVVbHVkR1ZzSUVOdgpjbkJ2Y21GMGFXOXVNUlF3RWdZRFZRUUhEQXRUWVc1MFlTQkRiR0Z5WVRFTE1Ba0dBMVVFQ0F3Q1EwRXhDekFKCkJnTlZCQVlUQWxWVE1CNFhEVEU0TURVeU1URXdORFV4TUZvWERUUTVNVEl6TVRJek5UazFPVm93YURFYU1CZ0cKQTFVRUF3d1JTVzUwWld3Z1UwZFlJRkp2YjNRZ1EwRXhHakFZQmdOVkJBb01FVWx1ZEdWc0lFTnZjbkJ2Y21GMAphVzl1TVJRd0VnWURWUVFIREF0VFlXNTBZU0JEYkdGeVlURUxNQWtHQTFVRUNBd0NRMEV4Q3pBSkJnTlZCQVlUCkFsVlRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVDNm5Fd01ESVlaT2ovaVBXc0N6YUVLaTcKMU9pT1NMUkZoV0dqYm5CVkpmVm5rWTR1M0lqa0RZWUwwTXhPNG1xc3lZamxCYWxUVll4RlAyc0pCSzV6bEtPQgp1ekNCdURBZkJnTlZIU01FR0RBV2dCUWlaUXpXV3AwMGlmT0R0SlZTdjFBYk9TY0dyREJTQmdOVkhSOEVTekJKCk1FZWdSYUJEaGtGb2RIUndjem92TDJObGNuUnBabWxqWVhSbGN5NTBjblZ6ZEdWa2MyVnlkbWxqWlhNdWFXNTAKWld3dVkyOXRMMGx1ZEdWc1UwZFlVbTl2ZEVOQkxtUmxjakFkQmdOVkhRNEVGZ1FVSW1VTTFscWROSW56ZzdTVgpVcjlRR3prbkJxd3dEZ1lEVlIwUEFRSC9CQVFEQWdFR01CSUdBMVVkRXdFQi93UUlNQVlCQWY4Q0FRRXdDZ1lJCktvWkl6ajBFQXdJRFNRQXdSZ0loQU9XLzVRa1IrUzlDaVNEY05vb3dMdVBSTHNXR2YvWWk3R1NYOTRCZ3dUd2cKQWlFQTRKMGxySG9NcytYbzVvL3NYNk85UVd4SFJBdlpVR09kUlE3Y3ZxUlhhcUk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KAAEAAAAAAAAAAQAAAAAAAAAKAAAAAAAAAAsAAAAAAAAAc29tZV9uYW1lAHNvbWVfdmFsdWUA",
        "endorsements": ""
    }"""

    r = client.post(
        "/app/register-service",
        {
            "origin": str(origin),
            "name": str(name),
            "address": str(address),
            "port": port,
            "protocol": protocol,
            "attestation": demo_attestation,
            "algorithm": "ECDSAP384SHA384",
            "public_key": public_pem.decode("ascii"),
        },
    )
    assert r.status_code == http.HTTPStatus.NO_CONTENT
    return r


def check_record(host, port, ca, name, stype, expected_data=None):
    """Checks for existance of a specific DNS record"""
    qname = dns.name.from_text(name)
    qtype = rdt.from_text(stype)
    with requests.sessions.Session() as session:
        q = dns.message.make_query(qname, qtype)
        r = dns.query.https(
            q,
            "https://" + host + ":" + str(port) + "/app/dns-query",
            session=session,
            verify=ca,
            post=False,
        )
        for a in r.answer:
            assert a.name == qname
            saw_expected = False
            for item in a.items:
                assert item.rdclass == rdc.IN
                assert item.rdtype in [
                    qtype,
                    rdt.RRSIG,
                    rdt.NSEC,
                    rdt.NSEC3,
                ]
                if expected_data:
                    if (
                        item.rdtype != qtype
                        or item.to_wire() == expected_data.to_wire()
                    ):
                        saw_expected = True
            assert not expected_data or saw_expected


def validate_rrsigs(response: dns.message.Message, qtype, keys):
    """Validate RRSIG records"""
    name = response.question[0].name
    rrs = response.find_rrset(dns.message.ANSWER, name, rdc.IN, qtype)
    rrsigs = response.find_rrset(dns.message.ANSWER, name, rdc.IN, rdt.RRSIG, qtype)
    if keys is not None:
        dns.dnssec.validate(rrs, rrsigs, keys)


def get_records(host, port, ca, qname, stype, keys=None):
    """Get a set of DNS records"""
    if isinstance(qname, str):
        qname = dns.name.from_text(qname)
    qtype = rdt.from_text(stype)
    with requests.sessions.Session() as session:
        q = dns.message.make_query(qname, qtype)
        r = dns.query.https(
            q,
            "https://" + host + ":" + str(port) + "/app/dns-query",
            session=session,
            verify=ca,
            post=False,
        )
        if keys:
            validate_rrsigs(r, qtype, keys)
        return r
    return None


def get_keys(host, port, ca, origin):
    """Get DNSKEY records"""
    r = get_records(host, port, ca, origin, "DNSKEY", None)
    key_rrs = r.find_rrset(r.answer, origin, rdc.IN, rdt.DNSKEY)
    keys = {origin: key_rrs}
    validate_rrsigs(r, rdt.DNSKEY, keys)
    return keys


def A(s):
    """Parse an A record"""
    return dns.rdata.from_text(rdc.IN, rdt.A, s)


def test_basic(network, args):
    """Basic tests"""
    primary, _ = network.find_primary()

    with primary.client() as client:
        host = primary.get_public_rpc_host()
        port = primary.get_public_rpc_port()
        ca = primary.session_ca()["ca"]

        origin = dns.name.from_text("example.com.")

        rd = A("1.2.3.4")
        add_record(client, origin, "www", "A", rd)
        check_record(host, port, ca, "www.example.com.", "A", rd)

        rd2 = A("1.2.3.5")
        add_record(client, origin, "www", "A", rd2)
        check_record(host, port, ca, "www.example.com.", "A", rd2)
        check_record(host, port, ca, "www.example.com.", "A", rd)

        rd2 = A("1.2.3.5")
        add_record(client, origin, "www2", "A", rd2)

        keys = get_keys(host, port, ca, origin)

        name = dns.name.from_text("www2.example.com.")
        get_records(host, port, ca, name, "A", keys)

        name = dns.name.from_text("www.example.com.")
        get_records(host, port, ca, name, "A", keys)

        # We're not authoritative for com., so we don't expect a DS record
        name = dns.name.from_text("example.com.")
        ds_rrs = get_records(host, port, ca, name, "DS", None)
        assert len(ds_rrs.answer) == 0


def test_service_reg(network, args):
    """Service registration tests"""
    primary, _ = network.find_primary()

    with primary.client() as client:
        host = primary.get_public_rpc_host()
        port = primary.get_public_rpc_port()
        ca = primary.session_ca()["ca"]

        origin = dns.name.from_text("example.com.")

        keys = get_keys(host, port, ca, origin)

        service_name = "service42.example.com."
        service_key = ec.generate_private_key(ec.SECP384R1(), default_backend())
        service_public_key = service_key.public_key()
        public_pem = service_public_key.public_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PublicFormat.SubjectPublicKeyInfo,
        )

        submit_service_registration(
            client, origin, service_name, "1.2.3.4", port, "tcp", public_pem
        )

        check_record(host, port, ca, service_name, "A", A("1.2.3.4"))

        r = get_records(host, port, ca, service_name, "A", keys)
        print(r)


def run(args):
    """Run tests"""
    with infra.network.network(
        args.nodes, args.binary_dir, args.debug_nodes, args.perf_nodes, pdb=args.pdb
    ) as network:
        network.start_and_open(args)
        test_basic(network, args)

        set_registration_policy(network, args)
        test_service_reg(network, args)


if __name__ == "__main__":

    def cliparser(parser):
        """Add parser"""
        parser.description = "DNS tests"

    targs = infra.e2e_args.cli_args(cliparser)

    targs.nodes = infra.e2e_args.min_nodes(targs, f=0)
    targs.constitution = glob.glob("../tests/constitution/*")
    targs.package = "libccfdns"

    run(targs)
