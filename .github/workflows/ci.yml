name: Continuous Integration

on:
  schedule:
    - cron: "0 0 * * 0"
  pull_request:
  workflow_dispatch:
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ !contains(github.ref, 'main')}}

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  checks:
    name: "CI checks (virtual)"
    runs-on: ubuntu-24.04
    container:
      image: mcr.microsoft.com/azurelinux/base/core:3.0
      options: --user root --publish-all --cap-add NET_ADMIN --cap-add NET_RAW --cap-add SYS_PTRACE

    steps:
      - name: "Checkout dependencies"
        shell: bash
        run: |
          gpg --import /etc/pki/rpm-gpg/MICROSOFT-RPM-GPG-KEY
          tdnf -y update
          tdnf -y install ca-certificates git

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run CI checks
        run: |
          set -ex
          git config --global --add safe.directory /__w/ccfdns/ccfdns
          tdnf -y install tar build-essential
          ./scripts/setup-ci.sh
          ./scripts/ci-checks.sh
        shell: bash

  build-and-test:
    name: "Build and test (virtual)"
    needs: checks
    runs-on: ubuntu-24.04
    container:
      image: mcr.microsoft.com/azurelinux/base/core:3.0
      options: --user root --publish-all --cap-add NET_ADMIN --cap-add NET_RAW --cap-add SYS_PTRACE

    steps:
      - name: "Checkout dependencies"
        shell: bash
        run: |
          set -ex
          gpg --import /etc/pki/rpm-gpg/MICROSOFT-RPM-GPG-KEY
          tdnf -y update
          tdnf -y install ca-certificates git wget libuv libcurl

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Install CCF with dependencies"
        shell: bash
        run: |
          set -ex
          wget https://github.com/microsoft/CCF/releases/download/ccf-6.0.12/ccf_virtual_devel_6.0.12_x86_64.rpm
          tdnf -y install ccf_virtual_devel_6.0.12_x86_64.rpm
          ./scripts/setup-ci.sh

      - name: "Build Debug"
        run: |
          set -ex
          mkdir build
          cd build
          cmake -GNinja -DCOMPILE_TARGET=virtual -DCMAKE_BUILD_TYPE=Debug ..
          ninja
        shell: bash

      - name: "Run unit tests"
        run: |
          set -ex
          cd build
          ./tests.sh -L unit
        shell: bash

      - name: "Run all other (e2e) tests"
        run: |
          set -ex
          cd build
          ./tests.sh -LE unit
        shell: bash

      - name: "Upload logs"
        uses: actions/upload-artifact@v4
        with:
          name: logs-azurelinux-virtual
          path: |
            build/workspace/*/*.config.json
            build/workspace/*/out
            build/workspace/*/err
            build/workspace/*/*.ledger/*
            build/*.cbor
          if-no-files-found: ignore
        if: success() || failure()

  build_and_test_caci:
    name: "Confidential Container CI"
    runs-on: [self-hosted, 1ES.Pool=gha-adns-ci]
    needs: checks

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Checkout dependencies"
        shell: bash
        run: |
          set -ex
          gpg --import /etc/pki/rpm-gpg/MICROSOFT-RPM-GPG-KEY
          tdnf -y update
          tdnf -y install ca-certificates git wget libuv libcurl

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Install CCF with dependencies"
        shell: bash
        run: |
          set -ex
          wget https://github.com/microsoft/CCF/releases/download/ccf-6.0.12/ccf_snp_devel_6.0.12_x86_64.rpm
          tdnf -y install ccf_snp_devel_6.0.12_x86_64.rpm
          ./scripts/setup-ci.sh

      - name: "Build Debug"
        run: |
          set -ex
          mkdir build
          cd build
          cmake -GNinja -DCOMPILE_TARGET=snp -DCMAKE_BUILD_TYPE=Debug ..
          ninja
        shell: bash

      - name: "Run unit tests"
        run: |
          set -ex
          cd build
          ./tests.sh -L unit
        shell: bash

      - name: "Run all other (e2e) tests"
        run: |
          set -ex
          cd build
          ./tests.sh -LE unit
        shell: bash

      - name: "Upload logs"
        uses: actions/upload-artifact@v4
        with:
          name: logs-azurelinux-snp
          path: |
            build/workspace/*/*.config.json
            build/workspace/*/out
            build/workspace/*/err
            build/workspace/*/*.ledger/*
            build/*.cbor
          if-no-files-found: ignore
        if: success() || failure()
