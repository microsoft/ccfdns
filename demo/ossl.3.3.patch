diff --git a/Configurations/10-main.conf b/Configurations/10-main.conf
index cba57b4127..319a9925fe 100644
--- a/Configurations/10-main.conf
+++ b/Configurations/10-main.conf
@@ -485,7 +485,7 @@ my %targets = (
                                    release => "-O3"),
         cflags           => add(threads("-pthread")),
         lib_cppflags     => add("-DBN_DIV2W"),
-        ex_libs          => add("-ldld", threads("-pthread")),
+        ex_libs          => add("-ldld", "-lresolv", threads("-pthread")),
         bn_ops           => "BN_LLONG RC4_CHAR",
         dso_scheme       => "dl",
         shared_cflag     => "-fPIC",
@@ -504,7 +504,7 @@ my %targets = (
         CFLAGS           => combine(picker(debug   => "-O0 -g",
                                            release => "-O3")),
         cflags           => add(threads("-pthread")),
-        ex_libs          => add("-ldl", threads("-pthread")),
+        ex_libs          => add("--ldl", "-lresolv", threads("-pthread")),
         bn_ops           => "SIXTY_FOUR_BIT_LONG RC4_CHAR",
         asm_arch         => 'parisc20_64',
         perlasm_scheme   => "64",
@@ -523,7 +523,7 @@ my %targets = (
         cflags           => "+Optrs_strongly_typed -Ae +ESlit",
         cppflags         => threads("-D_REENTRANT"),
         lib_cppflags     => add("-DBN_DIV2W -DMD32_XARRAY"),
-        ex_libs          => add("-ldld", threads("-lpthread")),
+        ex_libs          => add("-ldld", "-lresolv", threads("-lpthread")),
         bn_ops           => "RC4_CHAR",
         dso_scheme       => "dl",
         shared_cflag     => "+Z",
@@ -545,7 +545,7 @@ my %targets = (
         cflags           => "+DD64 +Optrs_strongly_typed -Ae +ESlit",
         cppflags         => threads("-D_REENTRANT") ,
         lib_cppflags     => add("-DMD32_XARRAY"),
-        ex_libs          => add("-ldl", threads("-lpthread")),
+        ex_libs          => add("-ldl", "-lresolv", threads("-lpthread")),
         bn_ops           => "SIXTY_FOUR_BIT_LONG RC4_CHAR",
         asm_arch         => 'parisc20_64',
         perlasm_scheme   => "64",
@@ -563,7 +563,7 @@ my %targets = (
                                    release => "+O2"),
         cflags           => "-Ae +DD32 +Olit=all -z",
         cppflags         => add(threads("-D_REENTRANT")),
-        ex_libs          => add("-ldl", threads("-lpthread")),
+        ex_libs          => add("-ldl", "-lresolv", threads("-lpthread")),
         bn_ops           => "SIXTY_FOUR_BIT",
         asm_arch         => 'ia64',
         perlasm_scheme   => 'void',
@@ -578,7 +578,7 @@ my %targets = (
                                    release => "+O3"),
         cflags           => "-Ae +DD64 +Olit=all -z",
         cppflags         => threads("-D_REENTRANT"),
-        ex_libs          => add("-ldl", threads("-lpthread")),
+        ex_libs          => add("-ldl", "-lresolv", threads("-lpthread")),
         bn_ops           => "SIXTY_FOUR_BIT_LONG",
         asm_arch         => 'ia64',
         perlasm_scheme   => 'void',
@@ -593,7 +593,7 @@ my %targets = (
         CFLAGS           => picker(debug   => "-O0 -g",
                                    release => "-O3"),
         cflags           => add(threads("-pthread")),
-        ex_libs          => add("-ldl", threads("-pthread")),
+        ex_libs          => add("-ldl", "-lresolv", threads("-pthread")),
         bn_ops           => "SIXTY_FOUR_BIT",
         asm_arch         => 'ia64',
         perlasm_scheme   => 'void',
@@ -607,7 +607,7 @@ my %targets = (
         CFLAGS           => picker(debug   => "-O0 -g",
                                    release => "-O3"),
         cflags           => combine("-mlp64", threads("-pthread")),
-        ex_libs          => add("-ldl", threads("-pthread")),
+        ex_libs          => add("-ldl", "-lresolv", threads("-pthread")),
         bn_ops           => "SIXTY_FOUR_BIT_LONG",
         asm_arch         => 'ia64',
         perlasm_scheme   => 'void',
@@ -686,7 +686,7 @@ my %targets = (
         cflags           => threads("-pthread"),
         cxxflags         => combine("-std=c++11", threads("-pthread")),
         lib_cppflags     => "-DOPENSSL_USE_NODELETE",
-        ex_libs          => add("-ldl", threads("-pthread")),
+        ex_libs          => add("-ldl", "-lresolv", threads("-pthread")),
         bn_ops           => "BN_LLONG RC4_CHAR",
         thread_scheme    => "pthreads",
         dso_scheme       => "dlfcn",
@@ -1174,7 +1174,7 @@ my %targets = (
         CC               => "gcc",
         CFLAGS           => "-fomit-frame-pointer -O3 -Wall",
         lib_cppflags     => "-DPERL5 -DL_ENDIAN",
-        ex_libs          => add("-ldl"),
+        ex_libs          => add("-ldl", "-lresolv"),
         bn_ops           => "BN_LLONG",
         asm_arch         => 'x86',
         perlasm_scheme   => "elf",
@@ -1911,7 +1911,7 @@ my %targets = (
                                    release => "-O3"),
         cflags           => threads("-pthread"),
         cxxflags         => combine("-std=c++11", threads("-pthread")),
-        ex_libs          => add("-ldl", threads("-pthread")),
+        ex_libs          => add("-ldl", "-lresolv", threads("-pthread")),
         bn_ops           => "BN_LLONG RC4_CHAR",
         thread_scheme    => "pthreads",
         dso_scheme       => "dlfcn",
diff --git a/ssl/ssl_lib.c b/ssl/ssl_lib.c
index 7c90165a4b..1a89117d38 100644
--- a/ssl/ssl_lib.c
+++ b/ssl/ssl_lib.c
@@ -10,6 +10,7 @@
  */
 
 #include <stdio.h>
+#include <resolv.h>
 #include "ssl_local.h"
 #include "internal/e_os.h"
 #include <openssl/objects.h>
@@ -4713,6 +4714,103 @@ int ossl_ssl_get_error(const SSL *s, int i, int check_err)
     return SSL_ERROR_SYSCALL;
 }
 
+static void populate_dane_hack(SSL *ssl) {
+  SSL_CTX *ctx = ssl->ctx;
+
+  const char *hostname = SSL_get_servername(ssl, TLSEXT_NAMETYPE_host_name);
+  if (!hostname) {
+    fprintf(stderr, "Inject DANE. OSSL SNI: NULL\n");
+    return;
+  }
+
+  // Prepend with "_443._tcp." for demo purposes, as it's TCP only.
+
+  char query_hostname[256];
+  snprintf(query_hostname, sizeof(query_hostname), "_443._tcp.%s", hostname);
+  fprintf(stderr, "Inject DANE. Query: %s\n", query_hostname);
+
+  // Query TLSAs
+
+  uint8_t response[4096];
+  int len = res_query(query_hostname, ns_c_in, 52 /* TLSA */, response,
+                      sizeof(response));
+
+  if (len < 0) {
+    // No records. Silently return.
+    return;
+  }
+
+  // Parse records.
+
+  ns_msg handle;
+  if (ns_initparse(response, len, &handle) < 0) {
+    fprintf(stderr, "ns_initparse failed\n");
+    return;
+  }
+
+  const int count = ns_msg_count(handle, ns_s_an);
+  if (count == 0) {
+    fprintf(stderr, "No TLSA records found\n");
+    return;
+  }
+
+  // If at least one TLSA records found - try set them.
+
+  if (SSL_CTX_dane_enable(ctx) <= 0 || SSL_dane_enable(ssl, hostname) <= 0) {
+    unsigned long err = ERR_get_error();
+    const char *reason = ERR_reason_error_string(err);
+    if (strcmp(reason, "dane already enabled") != 0) {
+      fprintf(stderr, "Failed to enable DANE support: %s\n", reason);
+    }
+
+    // Return anyway, because enabling + populating records must've happened
+    // together, the otherwise doesn't make sense.
+    return;
+  }
+
+  for (int i = 0; i < count; ++i) {
+    ns_rr rr;
+    if (ns_parserr(&handle, ns_s_an, i, &rr) < 0) {
+      fprintf(stderr, "ns_parserr failed\n");
+      continue;
+    }
+
+    const uint8_t *rdata = ns_rr_rdata(rr);
+    int rdlen = ns_rr_rdlen(rr);
+
+    if (rdlen < 3) {
+      fprintf(stderr, "Invalid TLSA record length\n");
+      continue;
+    }
+
+    uint8_t usage = rdata[0];
+    uint8_t selector = rdata[1];
+    uint8_t matching_type = rdata[2];
+
+    // Convert rdata (except first 3 bytes) to hex string and then to binary
+
+    static char hexstr[64 + 1] = {0};
+    if (rdlen < 3 + 32) {
+      fprintf(stderr, "Insufficient data length\n");
+      return;
+    }
+    for (int i = 0; i < 32; ++i) {
+      snprintf(hexstr + i * 2, 3, "%02x", rdata[3 + i]);
+    }
+    unsigned char tlsa_data[32];
+    for (int i = 0; i < 32; ++i) {
+      sscanf(hexstr + 2 * i, "%2hhx", &tlsa_data[i]);
+    }
+
+    const int ret = SSL_dane_tlsa_add(ssl, usage, selector, matching_type,
+                                      tlsa_data, sizeof(tlsa_data));
+    fprintf(stderr,
+            "Add record: usage: %d, selector: %d, mtype: %d, hex: %s, success: "
+            "%d\n",
+            usage, selector, matching_type, hexstr, ret);
+  }
+}
+
 static int ssl_do_handshake_intern(void *vargs)
 {
     struct ssl_async_args *args = (struct ssl_async_args *)vargs;
@@ -4735,6 +4833,8 @@ int SSL_do_handshake(SSL *s)
         return ossl_quic_do_handshake(s);
 #endif
 
+  populate_dane_hack(s);
+
     if (sc == NULL)
         return -1;
 
diff --git a/util/perl/OpenSSL/config.pm b/util/perl/OpenSSL/config.pm
old mode 100755
new mode 100644
index 04aef069f9..5048ad5a50
--- a/util/perl/OpenSSL/config.pm
+++ b/util/perl/OpenSSL/config.pm
@@ -795,7 +795,7 @@ EOF
       # We don't have any sunos target in Configurations/*.conf, so why here?
       [ '.*-.*-sunos4',           { target => "sunos" } ],
       [ '.*86.*-.*-bsdi4',        { target => "BSD-x86-elf",
-                                    lflags => [ '-ldl' ],
+                                    lflags => [ '-ldl, -lresolv' ],
                                     disable => [ 'sse2' ] } ],
       [ 'alpha.*-.*-.*bsd.*',     { target => "BSD-generic64",
                                     defines => [ 'L_ENDIAN' ] } ],
